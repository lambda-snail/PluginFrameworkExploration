using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Application.Sdk;

[Generator]
public class PluginGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context) { }

    public void Execute(GeneratorExecutionContext context)
    {
        // Find the main method
//         var mainMethod = context.Compilation.GetEntryPoint(context.CancellationToken);
//
//         // Build up the source code
//         string source = $@"// <auto-generated/>
//             using System;
//
//             namespace {mainMethod.ContainingNamespace.ToDisplayString()}
//             {{
//                 public static partial class {mainMethod.ContainingType.Name}
//                 {{
//                     static partial void HelloFrom(string name) =>
//                         Console.WriteLine($""Generator says: Hi from '{{name}}'"");
//                 }}
//             }}";
//         var typeName = mainMethod.ContainingType.Name;

        // Add the source code to the compilation
//        context.AddSource($"{typeName}.g.cs", source);
        
        var syntaxTrees = context.Compilation.SyntaxTrees;
        var handlers = syntaxTrees.Where(n => n.GetText().ToString().Contains("IPlugin"));
        
        foreach (var handler in handlers)
        {
            var sourceCodeBuilder = new StringBuilder();
            
            var usingDirectives = handler.GetRoot().DescendantNodes().OfType<UsingDirectiveSyntax>();
            var usingDirectivesString = string.Join(Environment.NewLine, usingDirectives);
            sourceCodeBuilder.Append(usingDirectivesString);

            var classDeclaration = handler.GetRoot().DescendantNodes().OfType<ClassDeclarationSyntax>().First();

            var properties = classDeclaration.DescendantNodes().OfType<PropertyDeclarationSyntax>();

            var outputProperty = properties.Where(p => p.AttributeLists.Any(pp => pp.ToString().StartsWith("[Output")));
            if (outputProperty.Count() > 1)
            {
                var desc = new DiagnosticDescriptor(
                    "PLUGIN001",
                    "At most one output parameter allowed",
                    "At most one property can be decorated with the [Output] attribute",
                    "Plugin Framework",
                    DiagnosticSeverity.Error,
                    true);

                context.ReportDiagnostic(Diagnostic.Create(desc, classDeclaration.GetLocation()));
            }
            
            var inputProperties = properties.Where(p => p.AttributeLists.Any(pp => pp.ToString().StartsWith("[Input"))); 
            if (! outputProperty.Any())
            {
                var desc = new DiagnosticDescriptor(
                    "PLUGIN002",
                    "There are now input properties here",
                    "This is just a test to see if things are detected correctly",
                    "Plugin Framework",
                    DiagnosticSeverity.Warning,
                    true);

                context.ReportDiagnostic(Diagnostic.Create(desc, classDeclaration.GetLocation()));
            }

        }
    }
}